{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SignDashupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-sign-up"
      }
    },
    "SignDashinLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-sign-in"
      }
    },
    "CreateDashlinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-create-link"
      }
    },
    "DeactivateDashlinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-deactivate-link"
      }
    },
    "LinksDashbyDashuserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-links-by-user"
      }
    },
    "RedirectLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-redirect"
      }
    },
    "DeletingDashexpiredDashlinksLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-deleting-expired-links"
      }
    },
    "SendDashnotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/shortlinker-dev-send-notifications"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "shortlinker",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LinksTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "sqs:SendMessage",
                    "sqs:SendMessageBatch"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "NotificationsQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "shortlinker",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-a663f1d0-3c06-4eb9-a417-f87d9cb6e599"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SignDashupLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SignDashinLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "CreateDashlinkLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeactivateDashlinkLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "LinksDashbyDashuserLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "RedirectLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeletingDashexpiredDashlinksLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SendDashnotificationsLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "SignDashupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_sign_up.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-sign-up",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignDashupLogGroup"
      ]
    },
    "SignDashinLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_sign_in.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-sign-in",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignDashinLogGroup"
      ]
    },
    "CreateDashlinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_create_link.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-create-link",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateDashlinkLogGroup"
      ]
    },
    "DeactivateDashlinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_deactivate_link.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-deactivate-link",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeactivateDashlinkLogGroup"
      ]
    },
    "LinksDashbyDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_links_by_user.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-links-by-user",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LinksDashbyDashuserLogGroup"
      ]
    },
    "RedirectLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_redirect.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-redirect",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RedirectLogGroup"
      ]
    },
    "DeletingDashexpiredDashlinksLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_deleting_expired_links.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-deleting-expired-links",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeletingDashexpiredDashlinksLogGroup"
      ]
    },
    "SendDashnotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/shortlinker.zip"
        },
        "Handler": "s_send_notifications.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "shortlinker-dev-send-notifications",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BCRYPT_SECRET": "5",
            "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
            "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
            "PRIVATE_KEY": "privateKey11",
            "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
            "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
            "SENDER_EMAIL": "trainenglish4444@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendDashnotificationsLogGroup"
      ]
    },
    "SignDashupLambdaVersionJXhPWR4xlPJ0Zp5pjtbpB5v1GsyyDvYLA4ThTxpk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignDashupLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "SignDashinLambdaVersionEXFRtwymQlqkIBr8wgSKiR2dmzg91BNHangHwWDc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignDashinLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "CreateDashlinkLambdaVersionlGkjlt2TQ3RoEyf3IOzzmD5g761CBqDkODsFXXIE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateDashlinkLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "DeactivateDashlinkLambdaVersionXh0MXYrCcWjXmOcotsnXn9tMoCDgmvg8HAyLLiJo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeactivateDashlinkLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "LinksDashbyDashuserLambdaVersionNRlk7R7WVTgMyhXGSWqky2bpV0mtQgbNmtI1NnR0JzI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LinksDashbyDashuserLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "RedirectLambdaVersionfaGeJIlgKO8urg6FGC7qmkTsRq8cZFoXefUEgzmnhoE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RedirectLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "DeletingDashexpiredDashlinksLambdaVersion0wIANfbsOI00O5U1LpFxmYP1r3Em2leHwrP3YwOy1E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeletingDashexpiredDashlinksLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "SendDashnotificationsLambdaVersion7TptHaoUydToF7WuQVpziycHSaqKQLHnXIjoNliLe10": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendDashnotificationsLambdaFunction"
        },
        "CodeSha256": "MKHbwKJNOzInJ7ihmaJTReUu6CYVjq4DCjLgHyB5puY="
      }
    },
    "DeletingDashexpiredDashlinksEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DeletingDashexpiredDashlinksLambdaFunction",
                "Arn"
              ]
            },
            "Id": "deleting-expired-linksSchedule"
          }
        ]
      }
    },
    "DeletingDashexpiredDashlinksLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeletingDashexpiredDashlinksLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DeletingDashexpiredDashlinksEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-shortlinker",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignDashup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "sign-up",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignDashin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "sign-in",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLink": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "link",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLinkDeactivate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceLink"
        },
        "PathPart": "deactivate",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMyDashlinks": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "my-links",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignDashupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignDashup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignDashupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignDashupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthSignDashinPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignDashin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignDashinLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignDashinLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLinkCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateDashlinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateDashlinkLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodLinkDeactivatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLinkDeactivate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeactivateDashlinkLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeactivateDashlinkLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMyDashlinksGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMyDashlinks"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LinksDashbyDashuserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LinksDashbyDashuserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RedirectLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RedirectLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1699278295631": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAuthSignDashupPost",
        "ApiGatewayMethodAuthSignDashinPost",
        "ApiGatewayMethodLinkCreatePost",
        "ApiGatewayMethodLinkDeactivatePost",
        "ApiGatewayMethodMyDashlinksGet",
        "ApiGatewayMethodIdVarGet"
      ]
    },
    "SignDashupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignDashupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignDashinLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignDashinLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateDashlinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashlinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeactivateDashlinkLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeactivateDashlinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LinksDashbyDashuserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LinksDashbyDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RedirectLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RedirectLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/shortlinker-dev"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "shortlinker",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/shortlinker/dev/1699278318805-2023-11-06T13:45:18.805Z/custom-resources.zip"
        },
        "FunctionName": "shortlinker-dev-custom-resource-apigw-cw-role",
        "Handler": "api-gateway-cloud-watch-role/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs16.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "SendDashnotificationsEventSourceMappingSQSNotificationsQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "NotificationsQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "SendDashnotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Users",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "LinksTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Links",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "owner_email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "owner_email",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "NotificationsQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "notifications",
        "ReceiveMessageWaitTimeSeconds": 20,
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 60
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-ServerlessDeploymentBucketName"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": "sls-shortlinker-dev-EnterpriseLogAccessIamRole"
      }
    },
    "SignDashupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignDashupLambdaVersionJXhPWR4xlPJ0Zp5pjtbpB5v1GsyyDvYLA4ThTxpk"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-SignDashupLambdaFunctionQualifiedArn"
      }
    },
    "SignDashinLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignDashinLambdaVersionEXFRtwymQlqkIBr8wgSKiR2dmzg91BNHangHwWDc"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-SignDashinLambdaFunctionQualifiedArn"
      }
    },
    "CreateDashlinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateDashlinkLambdaVersionlGkjlt2TQ3RoEyf3IOzzmD5g761CBqDkODsFXXIE"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-CreateDashlinkLambdaFunctionQualifiedArn"
      }
    },
    "DeactivateDashlinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeactivateDashlinkLambdaVersionXh0MXYrCcWjXmOcotsnXn9tMoCDgmvg8HAyLLiJo"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-DeactivateDashlinkLambdaFunctionQualifiedArn"
      }
    },
    "LinksDashbyDashuserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LinksDashbyDashuserLambdaVersionNRlk7R7WVTgMyhXGSWqky2bpV0mtQgbNmtI1NnR0JzI"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-LinksDashbyDashuserLambdaFunctionQualifiedArn"
      }
    },
    "RedirectLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RedirectLambdaVersionfaGeJIlgKO8urg6FGC7qmkTsRq8cZFoXefUEgzmnhoE"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-RedirectLambdaFunctionQualifiedArn"
      }
    },
    "DeletingDashexpiredDashlinksLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeletingDashexpiredDashlinksLambdaVersion0wIANfbsOI00O5U1LpFxmYP1r3Em2leHwrP3YwOy1E"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-DeletingDashexpiredDashlinksLambdaFunctionQualifiedArn"
      }
    },
    "SendDashnotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendDashnotificationsLambdaVersion7TptHaoUydToF7WuQVpziycHSaqKQLHnXIjoNliLe10"
      },
      "Export": {
        "Name": "sls-shortlinker-dev-SendDashnotificationsLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-shortlinker-dev-ServiceEndpoint"
      }
    }
  }
}