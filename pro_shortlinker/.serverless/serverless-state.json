{
  "service": {
    "service": "shortlinker",
    "serviceObject": {
      "name": "shortlinker"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "UsersTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "LinksTable",
                    "Arn"
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "sqs:SendMessage",
                "sqs:SendMessageBatch"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "environment": {
        "BCRYPT_SECRET": "5",
        "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
        "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
        "PRIVATE_KEY": "privateKey11",
        "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
        "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
        "SENDER_EMAIL": "trainenglish4444@gmail.com"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SignDashupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-sign-up"
            }
          },
          "SignDashinLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-sign-in"
            }
          },
          "CreateDashlinkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-create-link"
            }
          },
          "DeactivateDashlinkLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-deactivate-link"
            }
          },
          "LinksDashbyDashuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-links-by-user"
            }
          },
          "RedirectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-redirect"
            }
          },
          "DeletingDashexpiredDashlinksLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-deleting-expired-links"
            }
          },
          "SendDashnotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/shortlinker-dev-send-notifications"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "shortlinker",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/shortlinker-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "NotificationsQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "shortlinker",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-a663f1d0-3c06-4eb9-a417-f87d9cb6e599"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "SignDashupLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SignDashinLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateDashlinkLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeactivateDashlinkLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "LinksDashbyDashuserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RedirectLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeletingDashexpiredDashlinksLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SendDashnotificationsLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "SignDashupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_sign_up.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-sign-up",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignDashupLogGroup"
            ]
          },
          "SignDashinLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_sign_in.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-sign-in",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignDashinLogGroup"
            ]
          },
          "CreateDashlinkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_create_link.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-create-link",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashlinkLogGroup"
            ]
          },
          "DeactivateDashlinkLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_deactivate_link.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-deactivate-link",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeactivateDashlinkLogGroup"
            ]
          },
          "LinksDashbyDashuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_links_by_user.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-links-by-user",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LinksDashbyDashuserLogGroup"
            ]
          },
          "RedirectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_redirect.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-redirect",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RedirectLogGroup"
            ]
          },
          "DeletingDashexpiredDashlinksLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_deleting_expired_links.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-deleting-expired-links",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletingDashexpiredDashlinksLogGroup"
            ]
          },
          "SendDashnotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/shortlinker.zip"
              },
              "Handler": "s_send_notifications.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "shortlinker-dev-send-notifications",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BCRYPT_SECRET": "5",
                  "ACCESS_KEY": "nfodw528dcbf15dvc04b6bmgs7",
                  "REFRESH_KEY": "qiwwc67i30hcb3f7bdsjk",
                  "PRIVATE_KEY": "privateKey11",
                  "HOST": "https://uqhx0yf00h.execute-api.us-east-1.amazonaws.com/dev",
                  "SQS_URL": "https://sqs.us-east-1.amazonaws.com/421735757798",
                  "SENDER_EMAIL": "trainenglish4444@gmail.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendDashnotificationsLogGroup"
            ]
          },
          "SignDashupLambdaVersionaO29Lmqt2hebx5EeqkdJx4gMuJPWAQUFbIheplUL6CQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignDashupLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "SignDashinLambdaVersionUpRDDz1o9R7SmeN8m2Me5fGszQIVipoCikE4E9qHydE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignDashinLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "CreateDashlinkLambdaVersionZFDXiPI7vN2TfTL0WZr9fDb3plHHZk3dusJtUFPbQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashlinkLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "DeactivateDashlinkLambdaVersionZdnbsmIIiTyp2srGWKa4c0S5FVB5xzAGPBKkPuXSc8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeactivateDashlinkLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "LinksDashbyDashuserLambdaVersion4LmrsR8LmHgfo7Yo3AZ3a3uu7ayIBwaCoaHLkmVU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LinksDashbyDashuserLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "RedirectLambdaVersionWy4m2fWrjvyGmyFoEiPxn3GAvaqYVXSn7k82sUqM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RedirectLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "DeletingDashexpiredDashlinksLambdaVersionZJWEgU39eGVBWuzfBTuUXVjakdN2HjcbNZtycOHMsg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletingDashexpiredDashlinksLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "SendDashnotificationsLambdaVersionL5KEs7Ez2ruJp6AD77dolxX6kDjlXO5vPFeIh6c0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendDashnotificationsLambdaFunction"
              },
              "CodeSha256": "6qB3T81RnwbftLl0JlaYTKrvJU/46l8eNZSAxNyi5sY="
            }
          },
          "DeletingDashexpiredDashlinksEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DeletingDashexpiredDashlinksLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "deleting-expired-linksSchedule"
                }
              ]
            }
          },
          "DeletingDashexpiredDashlinksLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletingDashexpiredDashlinksLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DeletingDashexpiredDashlinksEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-shortlinker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSignDashup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "sign-up",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSignDashin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "sign-in",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLink": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "link",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinkCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLink"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLinkDeactivate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLink"
              },
              "PathPart": "deactivate",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMyDashlinks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "my-links",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthSignDashupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignDashup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignDashupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignDashupLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthSignDashinPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignDashin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignDashinLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignDashinLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLinkCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLinkCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashlinkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateDashlinkLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLinkDeactivatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLinkDeactivate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeactivateDashlinkLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeactivateDashlinkLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMyDashlinksGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMyDashlinks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LinksDashbyDashuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LinksDashbyDashuserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RedirectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RedirectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1699355829011": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthSignDashupPost",
              "ApiGatewayMethodAuthSignDashinPost",
              "ApiGatewayMethodLinkCreatePost",
              "ApiGatewayMethodLinkDeactivatePost",
              "ApiGatewayMethodMyDashlinksGet",
              "ApiGatewayMethodIdVarGet"
            ]
          },
          "SignDashupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignDashupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignDashinLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignDashinLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashlinkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashlinkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeactivateDashlinkLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeactivateDashlinkLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LinksDashbyDashuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LinksDashbyDashuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RedirectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RedirectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/shortlinker-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "shortlinker",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z/custom-resources.zip"
              },
              "FunctionName": "shortlinker-dev-custom-resource-apigw-cw-role",
              "Handler": "api-gateway-cloud-watch-role/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "SendDashnotificationsEventSourceMappingSQSNotificationsQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "NotificationsQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendDashnotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "LinksTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Links",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "owner_email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "owner_email",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "NotificationsQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "notifications",
              "ReceiveMessageWaitTimeSeconds": 20,
              "MessageRetentionPeriod": 1209600,
              "VisibilityTimeout": 60
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-shortlinker-dev-EnterpriseLogAccessIamRole"
            }
          },
          "SignDashupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignDashupLambdaVersionaO29Lmqt2hebx5EeqkdJx4gMuJPWAQUFbIheplUL6CQ"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-SignDashupLambdaFunctionQualifiedArn"
            }
          },
          "SignDashinLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignDashinLambdaVersionUpRDDz1o9R7SmeN8m2Me5fGszQIVipoCikE4E9qHydE"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-SignDashinLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashlinkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashlinkLambdaVersionZFDXiPI7vN2TfTL0WZr9fDb3plHHZk3dusJtUFPbQ"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-CreateDashlinkLambdaFunctionQualifiedArn"
            }
          },
          "DeactivateDashlinkLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeactivateDashlinkLambdaVersionZdnbsmIIiTyp2srGWKa4c0S5FVB5xzAGPBKkPuXSc8"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-DeactivateDashlinkLambdaFunctionQualifiedArn"
            }
          },
          "LinksDashbyDashuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LinksDashbyDashuserLambdaVersion4LmrsR8LmHgfo7Yo3AZ3a3uu7ayIBwaCoaHLkmVU"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-LinksDashbyDashuserLambdaFunctionQualifiedArn"
            }
          },
          "RedirectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RedirectLambdaVersionWy4m2fWrjvyGmyFoEiPxn3GAvaqYVXSn7k82sUqM"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-RedirectLambdaFunctionQualifiedArn"
            }
          },
          "DeletingDashexpiredDashlinksLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletingDashexpiredDashlinksLambdaVersionZJWEgU39eGVBWuzfBTuUXVjakdN2HjcbNZtycOHMsg"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-DeletingDashexpiredDashlinksLambdaFunctionQualifiedArn"
            }
          },
          "SendDashnotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendDashnotificationsLambdaVersionL5KEs7Ez2ruJp6AD77dolxX6kDjlXO5vPFeIh6c0"
            },
            "Export": {
              "Name": "sls-shortlinker-dev-SendDashnotificationsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-shortlinker-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "sign-up": {
        "handler": "s_sign_up.handler",
        "events": [
          {
            "http": {
              "path": "auth/sign-up",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-sign-up",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignDashupLambdaVersionaO29Lmqt2hebx5EeqkdJx4gMuJPWAQUFbIheplUL6CQ"
      },
      "sign-in": {
        "handler": "s_sign_in.handler",
        "events": [
          {
            "http": {
              "path": "auth/sign-in",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-sign-in",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignDashinLambdaVersionUpRDDz1o9R7SmeN8m2Me5fGszQIVipoCikE4E9qHydE"
      },
      "create-link": {
        "handler": "s_create_link.handler",
        "events": [
          {
            "http": {
              "path": "link/create",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-create-link",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateDashlinkLambdaVersionZFDXiPI7vN2TfTL0WZr9fDb3plHHZk3dusJtUFPbQ"
      },
      "deactivate-link": {
        "handler": "s_deactivate_link.handler",
        "events": [
          {
            "http": {
              "path": "link/deactivate",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-deactivate-link",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeactivateDashlinkLambdaVersionZdnbsmIIiTyp2srGWKa4c0S5FVB5xzAGPBKkPuXSc8"
      },
      "links-by-user": {
        "handler": "s_links_by_user.handler",
        "events": [
          {
            "http": {
              "path": "my-links",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-links-by-user",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LinksDashbyDashuserLambdaVersion4LmrsR8LmHgfo7Yo3AZ3a3uu7ayIBwaCoaHLkmVU"
      },
      "redirect": {
        "handler": "s_redirect.handler",
        "events": [
          {
            "http": {
              "path": "{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "shortlinker-dev-redirect",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RedirectLambdaVersionWy4m2fWrjvyGmyFoEiPxn3GAvaqYVXSn7k82sUqM"
      },
      "deleting-expired-links": {
        "handler": "s_deleting_expired_links.handler",
        "events": [
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "name": "shortlinker-dev-deleting-expired-links",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeletingDashexpiredDashlinksLambdaVersionZJWEgU39eGVBWuzfBTuUXVjakdN2HjcbNZtycOHMsg"
      },
      "send-notifications": {
        "handler": "s_send_notifications.handler",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][4][\"Resource\"][0]"
              },
              "batchSize": 10
            }
          }
        ],
        "name": "shortlinker-dev-send-notifications",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendDashnotificationsLambdaVersionL5KEs7Ez2ruJp6AD77dolxX6kDjlXO5vPFeIh6c0"
      }
    },
    "resources": {
      "Resources": {
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Users",
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "LinksTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Links",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "owner_email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "owner_email",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "NotificationsQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "notifications",
            "ReceiveMessageWaitTimeSeconds": 20,
            "MessageRetentionPeriod": 1209600,
            "VisibilityTimeout": 60
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "vladkvlchk",
      "app": "shortlinker",
      "service": "shortlinker",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "app": "shortlinker",
    "org": "vladkvlchk",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "a663f1d0-3c06-4eb9-a417-f87d9cb6e599",
    "appUid": "pm3Jn27ckB1dYlVjml",
    "artifact": "/Users/vlad/Documents/projects/serverless-academy/pro_shortlinker/.serverless/shortlinker.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/shortlinker/dev/1699355848018-2023-11-07T11:17:28.018Z",
    "artifact": "shortlinker.zip"
  }
}